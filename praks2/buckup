#!/bin/bash
# Lihtne varukoopia skript (.tar.zst / .tar.gz / .tar.xz)
# 1) Varukoopia loomine (--exclude lisatud)
# 2) Arhiivi kontrollimine
# 3) Varukoopia suuruse kuvamine
# 4) Ainult viimased koopiad (3 tk jäetakse alles)
# 5) Failide ja kaustade välistamine (.jpg ja bin)
# 6) „Kuiv jooks“
# 7) Logimine
# 8) Vaba ruumi kontroll
# 9) SHA-256 kontrollsumma
# 10) Kompressori valik (zstd, gzip, xz)

set -o errexit
set -o nounset
set -o pipefail

SRC_DIR=~/skriptlinux/praks2/src
BACKUP_DIR=~/skriptlinux/praks2/backup
LOG_DIR=~/skriptlinux/praks2/logs
LOG_FILE="$LOG_DIR/backup.log"

DATE=$(date +%F_%H%M%S)

# Failide nimed eri kompressoritega
BACKUP_FILE_ZSTD="$BACKUP_DIR/src-$DATE.tar.zst"
BACKUP_FILE_GZIP="$BACKUP_DIR/src-$DATE.tar.gz"
BACKUP_FILE_XZ="$BACKUP_DIR/src-$DATE.tar.xz"

mkdir -p "$BACKUP_DIR" "$LOG_DIR"

# --- (6) KUIVJOOKS ---
if [[ "${1:-}" == "dry" ]]; then
  echo "KUIVJOOKS: Näitan, mis failid läheks arhiivi (arhiivi ei looda)."
  tar -cf - --exclude='*.jpg' --exclude='bin' \
      -C "$(dirname "$SRC_DIR")" "$(basename "$SRC_DIR")" \
    | tar -tvf -
  echo "Kuiv jooks lõpetatud — uut faili ei loodud."
  exit 0
fi

# --- (8) VABA RUUMI KONTROLL ---
SRC_BYTES=$(du -sb "$SRC_DIR" | awk '{print $1}')
FREE_BYTES=$(df -B1 "$BACKUP_DIR" | awk 'NR==2{print $4}')
REQUIRED_BYTES=$SRC_BYTES

if (( FREE_BYTES < REQUIRED_BYTES )); then
  echo "Viga: vaba ruumi on liiga vähe (vajalik: ${REQUIRED_BYTES} B, vaba: ${FREE_BYTES} B). Varundust ei käivitata."
  printf "[ %s ] BACKUP ABORT (not enough space: need %sB, free %sB)\n" \
    "$(date '+%F %T')" "$REQUIRED_BYTES" "$FREE_BYTES" >> "$LOG_FILE"
  exit 2
fi

# --- (7) LOGIMINE: algus ---
printf "[ %s ] BACKUP START\n" "$(date '+%F %T')" >> "$LOG_FILE"

# --- (10) KOMPRESSORI VALIK ---
echo "Loon kolm varukoopiat eri kompressoritega..."
echo

# ZSTD (.tar.zst)
echo "1. Pakkimine zstd-ga..."
tar -I 'zstd -19 -T0' -cf "$BACKUP_FILE_ZSTD" \
  --exclude='*.jpg' --exclude='bin' \
  -C "$(dirname "$SRC_DIR")" "$(basename "$SRC_DIR")"
echo "  -> Loodud: $BACKUP_FILE_ZSTD"

# GZIP (.tar.gz)
echo "2. Pakkimine gzip-iga..."
tar -zcf "$BACKUP_FILE_GZIP" \
  --exclude='*.jpg' --exclude='bin' \
  -C "$(dirname "$SRC_DIR")" "$(basename "$SRC_DIR")"
echo "  -> Loodud: $BACKUP_FILE_GZIP"

# XZ (.tar.xz)
echo "3. Pakkimine xz-ga..."
tar -Jcf "$BACKUP_FILE_XZ" \
  --exclude='*.jpg' --exclude='bin' \
  -C "$(dirname "$SRC_DIR")" "$(basename "$SRC_DIR")"
echo "  -> Loodud: $BACKUP_FILE_XZ"

# Kontrolli, et failid on loodud
if [ ! -f "$BACKUP_FILE_ZSTD" ] || [ ! -f "$BACKUP_FILE_GZIP" ] || [ ! -f "$BACKUP_FILE_XZ" ]; then
  echo "Viga: mõne arhiivi loomine ebaõnnestus."
  printf "[ %s ] BACKUP FAILED (compression error)\n" "$(date '+%F %T')" >> "$LOG_FILE"
  exit 1
fi

# --- (9) SHA-256 KONTROLLSUMMA iga faili jaoks ---
echo
echo "Arvutan SHA-256 kontrollsummad..."
for FILE in "$BACKUP_FILE_ZSTD" "$BACKUP_FILE_GZIP" "$BACKUP_FILE_XZ"; do
  sha256sum "$FILE" > "$FILE.sha256"
  if sha256sum -c "$FILE.sha256"; then
    echo "$(basename "$FILE"): OK"
  else
    echo "Viga: $(basename "$FILE") kontrollsumma ei vasta!"
    printf "[ %s ] BACKUP FAILED (checksum mismatch for %s)\n" \
      "$(date '+%F %T')" "$(basename "$FILE")" >> "$LOG_FILE"
    exit 3
  fi
done

# --- (3) VARUKOOPIATE SUURUSED ---
echo
echo "Varukoopiate suurused:"
du -h "$BACKUP_FILE_ZSTD" "$BACKUP_FILE_GZIP" "$BACKUP_FILE_XZ" | awk '{print $2 ": " $1}'

# --- (4) AINULT VIIMASED KOOPIAD (3 komplekti jääb alles) ---
echo
echo "Puhastan vanu varukoopiaid (alles jäävad ainult 3 komplekti)..."
cd "$BACKUP_DIR"
ls -1t src-*.tar.zst 2>/dev/null | tail -n +4 | xargs -r rm -f
ls -1t src-*.tar.gz 2>/dev/null | tail -n +4 | xargs -r rm -f
ls -1t src-*.tar.xz 2>/dev/null | tail -n +4 | xargs -r rm -f
ls -1t src-*.sha256 2>/dev/null | tail -n +10 | xargs -r rm -f
echo "Alles jäid:"
ls -1t src-* | head -n 9 || echo "(ühtegi varukoopiat pole)"

# --- (7) LOGIMINE: lõpp ---
printf "[ %s ] BACKUP END (created 3 archives: zst, gz, xz)\n" "$(date '+%F %T')" >> "$LOG_FILE"

echo
echo "Logi salvestatud faili: $LOG_FILE"
